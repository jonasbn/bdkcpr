NAME
    Business::DK::CPR - a Danish CPR code generator/validator

VERSION
    This documentation describes version 0.04

SYNOPSIS
        use Business::DK::CPR qw(validate);

        my $rv;
        eval { $rv = validate(1501721111); };

        if ($@) {
            die "Code is not of the expected format - $@";
        }

        if ($rv) {
            print 'CPR is valid';
        } else {
            print 'CPR is not valid';
        }

        use Business::DK::CPR qw(calculate);

        my @cprs = calculate(150172);

        my $number_of_valid_cprs = calculate(150172);

DESCRIPTION
    CPR stands for Central Person Registration and it the social security
    number used in Denmark.

SUBROUTINES AND METHODS
  validate

    This function checks a CPR number for validity. It takes a CPR number as
    argument and returns 1 (true) for valid and 0 (false) for invalid.

    It dies if the CPR number is malformed or in any way unparsable, be
    aware that the 6 first digits are representing a date (SEE: _checkdate
    function below). The date indicate the person's birthday, the last 4
    digits are representing a serial number and a control cifer.

    validate1968 is the old form of CPR number. It is validated using
    modulus 11.

    The new format introduced in 2001 can be validated using validate2007.

    The validate subroutine wraps both validators and checks using against
    both.

    NB! it is possible to make fake CPR number, which appear valid, please
    see MOTIVATION and the calculate function.

    validate is also exported as: validateCPR.

  validateCPR

    Better name for export. This is just a wrapper for validate

  validate1968

  validate2007

  generate

    This is a wrapper around calculate, so the naming is uniform to
    Business::DK::CVR

  calculate

    This function takes an integer representing a date and calculates valid
    CPR numbers for the specified date. In scalar context returns the number
    of valid CPR numbers possible and in list context a list of valid CPR
    numbers.

    If the date is malformed or in any way invalid or unspecified the
    function dies.

PRIVATE FUNCTIONS
  _assertdate

    This subroutine takes a digit integer representing a date in the format:
    DDMMYY.

    The date is checked for definedness, contents and length and finally,
    the correctness of the date.

    The subroutine returns 1 indicating true upon successful assertion or
    dies upon failure.

  _checkdate

    This subroutine takes a digit integer representing a date in the format:
    DDMMYY.

    The subroutine returns 1 indicating true upon successful check or dies
    upon failure.

  _assert_controlnumber

    This subroutine takes an 10 digit integer representing a CPR. The CPR is
    tested for definedness, contents and length.

    The subroutine returns 1 indicating true upon successful assertion or
    dies upon failure.

EXPORTS
    Business::DK::CPR exports on request:

    validate
    validateCPR
    validate1968
    validate2007
    calculate
    generate
    _checkdate
DIAGNOSTICS
DEPENDENCIES
    Business::DK::PO
    Business::DK::CVR
CONFIGURATION AND ENVIRONMENT
INCOMPATIBILITIES
TODO
    Nothing to do, please refer to the distribution TODO file
TEST AND QUALITY
    Coverage of the test suite is at 100%

    ---------------------------- ------ ------ ------ ------ ------ ------
    ------ File stmt bran cond sub pod time total
    ---------------------------- ------ ------ ------ ------ ------ ------
    ------ blib/lib/Business/DK/CPR.pm 100.0 100.0 100.0 100.0 100.0 100.0
    100.0 Total 100.0 100.0 100.0 100.0 100.0 100.0 100.0
    ---------------------------- ------ ------ ------ ------ ------ ------
    ------

BUGS AND LIMITATIONS
    No known bugs at this time. No known limitations apart from the obvious
    ones in the CPR system.

BUG REPORTING
    Please report issues via CPAN RT:

      http://rt.cpan.org/NoAuth/Bugs.html?Dist=Business-DK-CPR

    or by sending mail to

      bug-Business-DK-CPR@rt.cpan.org

SEE ALSO
    http://www.cpr.dk/
    Business::DK::PO
    Business::DK::CVR
MOTIVATION
    I write business related applications. So I need to be able to validate
    CPR numbers once is a while, hence the validation function.

    The calculate function is however a different story. When I was in
    school we where programming in Comal80 and some of the guys in my school
    created lists of CPR numbers valid with their own birthdays. The thing
    was that if you got caught riding the train without a valid ticket the
    personnel would only check the validity of you CPR number, so all you
    have to remember was your birthday and 4 more digits not being the
    actual last 4 digits of your CPR number.

    I guess this was the first hack I ever heard about and saw - I never
    tried it out, but back then it really fascinated me and my interest in
    computers was really sparked.

AUTHOR
    Jonas B. Nielsen, (jonasbn) - `<jonasbn@cpan.org>'

COPYRIGHT
    Business-DK-CPR is (C) by Jonas B. Nielsen, (jonasbn) 2006-2008

LICENSE
    Business-DK-CPR is released under the artistic license

    The distribution is licensed under the Artistic License, as specified by
    the Artistic file in the standard perl distribution
    (http://www.perl.com/language/misc/Artistic.html).

